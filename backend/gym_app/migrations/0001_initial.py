# Generated by Django 5.1.7 on 2025-04-02 11:05

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='GymSetting',
            fields=[
                ('key', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True, verbose_name='Ayar Adı')),
                ('value', models.TextField(verbose_name='Ayar Değeri')),
            ],
            options={
                'verbose_name': 'Genel Ayar',
                'verbose_name_plural': 'Genel Ayarlar',
            },
        ),
        migrations.CreateModel(
            name='MembershipPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Plan Adı')),
                ('plan_type', models.CharField(choices=[('days', 'Gün Bazlı'), ('sessions', 'Ders Sayısı Bazlı')], max_length=10, verbose_name='Plan Tipi')),
                ('duration_days', models.PositiveIntegerField(blank=True, help_text='Gün bazlı planlar için geçerlidir.', null=True, verbose_name='Süre (Gün)')),
                ('session_count', models.PositiveIntegerField(blank=True, help_text='Ders sayısı bazlı planlar için geçerlidir.', null=True, verbose_name='Ders Sayısı')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Fiyat')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktif Mi?')),
            ],
            options={
                'verbose_name': 'Üyelik Planı',
                'verbose_name_plural': 'Üyelik Planları',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SportProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Program Adı')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Açıklama')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktif Mi?')),
            ],
            options={
                'verbose_name': 'Spor Programı',
                'verbose_name_plural': 'Spor Programları',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('member', 'Üye'), ('trainer', 'Eğitmen')], default='member', max_length=10, verbose_name='Kullanıcı Rolü')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefon Numarası')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Adres')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Kullanıcı',
                'verbose_name_plural': 'Kullanıcılar',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(default=django.utils.timezone.now, verbose_name='Başlangıç Tarihi')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Bitiş Tarihi')),
                ('remaining_sessions', models.PositiveIntegerField(blank=True, null=True, verbose_name='Kalan Ders Sayısı')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktif Üyelik Mi?')),
                ('member', models.ForeignKey(limit_choices_to={'role': 'member'}, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to=settings.AUTH_USER_MODEL, verbose_name='Üye')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='members', to='gym_app.membershipplan', verbose_name='Üyelik Planı')),
            ],
            options={
                'verbose_name': 'Üyelik',
                'verbose_name_plural': 'Üyelikler',
                'ordering': ['-start_date', 'member'],
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_datetime', models.DateTimeField(verbose_name='Randevu Zamanı')),
                ('attended', models.BooleanField(default=False, verbose_name='Katıldı Mı?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('member', models.ForeignKey(limit_choices_to={'role': 'member'}, on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to=settings.AUTH_USER_MODEL, verbose_name='Üye')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='gym_app.sportprogram', verbose_name='Spor Programı')),
            ],
            options={
                'verbose_name': 'Randevu / Ders Kaydı',
                'verbose_name_plural': 'Randevular / Ders Kayıtları',
                'ordering': ['-appointment_datetime'],
                'constraints': [models.UniqueConstraint(fields=('member', 'appointment_datetime'), name='unique_appointment_time_for_member')],
            },
        ),
    ]
